

# Book Review API Documentation

This document provides details for all available API endpoints for the Book Review application.

## ðŸ“¦ Tech Stack
- Node.js + Express (^5.1.0)
- MongoDB + Mongoose (^8.15.0)
- JWT (jsonwebtoken ^9.0.2) for Authentication
- bcryptjs (^3.0.2) for password hashing
- cors (^2.8.5)
- dotenv (^16.5.0)
- morgan (^1.10.0)

## ðŸ”§ Setup

1.  **Clone the repository:**
    ```bash
    git clone https://github.com/yourusername/book-review-api # Replace with your actual repository URL
    cd book-review-api
    ```

2.  **Install dependencies:**
    ```bash
    npm install
    ```

3.  **Set up environment variables:**
    Create a `.env` file in the root of the project by copying the example file:
    ```bash
    cp .env.example .env
    ```
    Open the `.env` file and update the following variables with your actual credentials:
    ```
    MONGO_URI=your_mongodb_connection_string_here
    JWT_SECRET=your_super_secret_jwt_key_here
    PORT=3000 # Optional: Change if you want to use a different port
    ```

4.  **Run the development server:**
    ```bash
    npm run dev
    ```
    The server will start, typically on `http://localhost:3000` (or the port you specified).

## Base URL
All API endpoints are prefixed with `/api`. For example, an auth endpoint `/signup` would be accessible at `http://localhost:3000/api/auth/signup`.

## Authentication
Endpoints marked with "ðŸ”’ **Auth Required**" require a JSON Web Token (JWT) to be passed in the `Authorization` header as a Bearer token.
**Header Format:** `Authorization: Bearer <YOUR_JWT_TOKEN>`

---

## Authentication API (`/api/auth`)

Endpoints for user registration and login.

### 1. User Signup
  - **Method:** `POST`
  - **Path:** `/api/auth/signup`
  - **Description:** Registers a new user in the system.
  - **Request Body:**
    ```json
    {
      "username": "newuser",
      "password": "password123"
    }
    ```
    *Constraints: `username` must be unique.*
  - **Success Response (201 Created):**
    ```json
    {
      "message": "User registered"
    }
    ```
  - **Error Response (e.g., 400 Bad Request if username is taken or validation fails due to Mongoose schema):**
    If the username already exists, Mongoose will throw an error which, if not handled specifically, might result in a generic 500 error or a more specific Mongoose error response. A typical error for duplicate key would be:
    ```json
    {
      "error": "E11000 duplicate key error collection: <db_name>.users index: username_1 dup key: { username: \"newuser\" }" // Example of a raw MongoDB error
    }
    ```
    *(Note: The current implementation saves the user and returns a success message. More detailed error handling for specific validation failures like "Username already exists" could be added.)*
  - **Authentication:** Not required.

### 2. User Login
  - **Method:** `POST`
  - **Path:** `/api/auth/login`
  - **Description:** Authenticates an existing user and returns a JWT for accessing protected routes.
  - **Request Body:**
    ```json
    {
      "username": "newuser",
      "password": "password123"
    }
    ```
  - **Success Response (200 OK):**
    ```json
    {
      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2YTdlOTBhYzNiNGQ1ZTZmN2E4YjljMSIsImlhdCI6MTcyMjI1NzQwMH0.xxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    }
    ```
  - **Error Response (401 Unauthorized):**
    ```json
    {
      "msg": "Invalid credentials"
    }
    ```
  - **Authentication:** Not required.

---

## Books API (`/api/books`)

Endpoints for retrieving book information.

### 1. Search Books
  - **Method:** `GET`
  - **Path:** `/api/books/search`
  - **Description:** Searches for books by title or author using a case-insensitive regex match.
  - **Query Parameters:**
    - `query` (string, **required**): The search term to look for in book titles or authors.
  - **Example Request:** `GET /api/books/search?query=Cosmos`
  - **Success Response (200 OK):**
    Returns an array of matching book objects.
    ```json
    [
      {
        "_id": "66a7e8f1c3b4d5e6f7a8b9c0",
        "title": "Cosmos",
        "author": "Carl Sagan",
        "genre": "Science",
        "reviews": [],
        "createdBy": "66a7e90ac3b4d5e6f7a8b9c1"
        // Note: 'reviews' array here refers to the ObjectId references in the Book model.
        // It may or may not be populated depending on whether they were added to the Book document.
      }
    ]
    ```
    If no books match, an empty array `[]` is returned.
  - **Error Response (400 Bad Request):**
    If the `query` parameter is missing.
    ```json
    {
      "error": "Missing search query"
    }
    ```
  - **Error Response (500 Internal Server Error):**
    For unexpected server issues.
    ```json
    {
      "error": "Server error"
    }
    ```
  - **Authentication:** Not required.

### 2. List All Books (with Pagination and Filtering)
  - **Method:** `GET`
  - **Path:** `/api/books/`
  - **Description:** Retrieves a paginated list of all books. Supports filtering by author and genre (case-insensitive). Populates associated reviews for each book and provides a total count of matching books.
  - **Query Parameters:**
    - `page` (number, optional, default: `1`): The page number for pagination.
    - `limit` (number, optional, default: `10`): The number of books to return per page.
    - `author` (string, optional): Filter books by author name (case-insensitive regex match).
    - `genre` (string, optional): Filter books by genre (case-insensitive regex match).
  - **Example Request:** `GET /api/books?page=1&limit=5&author=Sagan&genre=Science`
  - **Success Response (200 OK):**
    ```json
    {
      "total": 1, // Total number of books matching the filter
      "page": 1,
      "limit": 5,
      "books": [
        {
          "_id": "66a7e8f1c3b4d5e6f7a8b9c0",
          "title": "Cosmos",
          "author": "Carl Sagan",
          "genre": "Science",
          "reviews": [ // Populated reviews, if Book.reviews array has review ObjectIds
            {
              "_id": "66a7e91fc3b4d5e6f7a8b9c2",
              "book": "66a7e8f1c3b4d5e6f7a8b9c0",
              "user": "66a7e90ac3b4d5e6f7a8b9c1", // Could be populated user object or just ID
              "rating": 5,
              "comment": "A classic!",
              "createdAt": "2024-07-29T10:00:00.000Z",
              "updatedAt": "2024-07-29T10:00:00.000Z"
            }
          ],
          "createdBy": "66a7e90ac3b4d5e6f7a8b9c1" // User ID of the creator
        }
      ]
    }
    ```
    *(Note: The `book.routes.js` file contains a duplicate `GET /` route definition. This documentation refers to the first, more comprehensive implementation which includes review population and total count. The second, simpler `GET /` route will not be hit due to Express routing order.)*
  - **Error Response (500 Internal Server Error):**
    For unexpected server issues.
    ```json
    {
      "error": "Server error"
    }
    ```
  - **Authentication:** Not required.

### 3. Get Book by ID (with Paginated Reviews and Average Rating)
  - **Method:** `GET`
  - **Path:** `/api/books/:id`
  - **Description:** Retrieves details for a specific book by its ID. Also includes paginated reviews for the book and calculates its average rating.
  - **Path Parameters:**
    - `id` (string, **required**): The MongoDB ObjectId of the book.
  - **Query Parameters (for review pagination):**
    - `page` (number, optional, default: `1`): The page number for the list of reviews.
    - `limit` (number, optional, default: `5`): The number of reviews to return per page.
  - **Example Request:** `GET /api/books/66a7e8f1c3b4d5e6f7a8b9c0?page=1&limit=2`
  - **Success Response (200 OK):**
    ```json
    {
      "_id": "66a7e8f1c3b4d5e6f7a8b9c0",
      "title": "Cosmos",
      "author": "Carl Sagan",
      "genre": "Science",
      "createdBy": "66a7e90ac3b4d5e6f7a8b9c1", // User ID of creator
      "averageRating": "4.8", // String representation of average rating, or null if no reviews
      "reviews": [ // Paginated list of reviews for this book
        {
          "_id": "66a7e91fc3b4d5e6f7a8b9c2",
          "book": "66a7e8f1c3b4d5e6f7a8b9c0",
          "user": { // User details populated (username only)
            "_id": "66a7e90ac3b4d5e6f7a8b9c1",
            "username": "testuser"
          },
          "rating": 5,
          "comment": "Absolutely enlightening!",
          "createdAt": "2024-07-29T10:00:00.000Z",
          "updatedAt": "2024-07-29T10:00:00.000Z"
        },
        {
          "_id": "66a7e93ac3b4d5e6f7a8b9c3",
          "book": "66a7e8f1c3b4d5e6f7a8b9c0",
          "user": {
            "_id": "66a7e94fc3b4d5e6f7a8b9c4",
            "username": "anotherreviewer"
          },
          "rating": 4,
          "comment": "Very good read.",
          "createdAt": "2024-07-28T12:00:00.000Z",
          "updatedAt": "2024-07-28T12:00:00.000Z"
        }
      ]
    }
    ```
  - **Error Response (404 Not Found):**
    If no book exists with the provided ID.
    ```json
    {
      "message": "Book not found"
    }
    ```
  - **Error Response (500 Internal Server Error):**
    For unexpected server issues.
    ```json
    {
      "error": "Server error"
    }
    ```
  - **Authentication:** Not required.

### 4. Test Route (Internal/Development)
  - **Method:** `GET`
  - **Path:** `/api/books/test`
  - **Description:** A simple test endpoint to check if the books route is responsive.
  - **Success Response (200 OK):**
    Content-Type: `text/html; charset=utf-8`
    Body: `Test OK`
  - **Authentication:** Not required.
  *(Note: This route appears to be for development or testing purposes and might not be intended for public consumption.)*

---

## Reviews API (`/api/reviews`)

Endpoints for creating, updating, and deleting book reviews. All review modification endpoints require authentication.

### 1. Add a Review to a Book
  - **Method:** `POST`
  - **Path:** `/api/reviews/book/:id`
  - **Description:** Adds a new review for a specific book. A user can only submit one review per book.
    *(Note: This action creates a `Review` document. It does not automatically update the `reviews` array in the corresponding `Book` document.)*
  - **Path Parameters:**
    - `id` (string, **required**): The MongoDB ObjectId of the book to review.
  - **Headers:**
    - `Authorization: Bearer <YOUR_JWT_TOKEN>` (ðŸ”’ **Auth Required**)
  - **Request Body:**
    ```json
    {
      "rating": 5,                  // Number, e.g., 1-5
      "comment": "This book was amazing and insightful!" // String
    }
    ```
  - **Success Response (201 Created):**
    Returns the newly created review object.
    ```json
    {
      "_id": "66a7e91fc3b4d5e6f7a8b9c2",
      "book": "66a7e8f1c3b4d5e6f7a8b9c0", // Book ID
      "user": "66a7e90ac3b4d5e6f7a8b9c1", // User ID from JWT
      "rating": 5,
      "comment": "This book was amazing and insightful!",
      "createdAt": "2024-07-29T10:00:00.000Z",
      "updatedAt": "2024-07-29T10:00:00.000Z"
    }
    ```
  - **Error Response (400 Bad Request):**
    If the user has already reviewed this book.
    ```json
    {
      "msg": "You already reviewed this book"
    }
    ```
  - **Error Response (401 Unauthorized):**
    If no token is provided or the token is malformed.
    ```json
    {
      "msg": "No token provided"
    }
    ```
  - **Error Response (403 Forbidden):**
    If the token is invalid or expired.
    ```json
    {
      "msg": "Invalid token"
    }
    ```
  - **Authentication:** ðŸ”’ **Auth Required**.

### 2. Update a Review
  - **Method:** `PUT`
  - **Path:** `/api/reviews/:id`
  - **Description:** Updates an existing review. Users can only update reviews they have created.
  - **Path Parameters:**
    - `id` (string, **required**): The MongoDB ObjectId of the review to update.
  - **Headers:**
    - `Authorization: Bearer <YOUR_JWT_TOKEN>` (ðŸ”’ **Auth Required**)
  - **Request Body:** (Provide fields to update)
    ```json
    {
      "rating": 4,
      "comment": "Updated thoughts: Still great, but with a few minor criticisms."
    }
    ```
  - **Success Response (200 OK):**
    Returns the updated review object.
    ```json
    {
      "_id": "66a7e91fc3b4d5e6f7a8b9c2", // Review ID
      "book": "66a7e8f1c3b4d5e6f7a8b9c0",
      "user": "66a7e90ac3b4d5e6f7a8b9c1",
      "rating": 4,
      "comment": "Updated thoughts: Still great, but with a few minor criticisms.",
      "createdAt": "2024-07-29T10:00:00.000Z", // Original creation date
      "updatedAt": "2024-07-29T10:05:00.000Z"  // Time of update
    }
    ```
  - **Error Response (404 Not Found):**
    If the review is not found or the authenticated user is not the owner of the review.
    ```json
    {
      "msg": "Review not found"
    }
    ```
  - **Error Response (401 Unauthorized / 403 Forbidden):** (As described in "Add a Review")
  - **Authentication:** ðŸ”’ **Auth Required**.

### 3. Delete a Review
  - **Method:** `DELETE`
  - **Path:** `/api/reviews/:id`
  - **Description:** Deletes an existing review. Users can only delete reviews they have created.
    *(Note: This action deletes the `Review` document. It does not automatically update the `reviews` array in the corresponding `Book` document if it was ever populated there.)*
  - **Path Parameters:**
    - `id` (string, **required**): The MongoDB ObjectId of the review to delete.
  - **Headers:**
    - `Authorization: Bearer <YOUR_JWT_TOKEN>` (ðŸ”’ **Auth Required**)
  - **Success Response (200 OK):**
    ```json
    {
      "msg": "Review deleted"
    }
    ```
  - **Error Response (404 Not Found):**
    If the review is not found or the authenticated user is not authorized to delete it.
    ```json
    {
      "msg": "Review not found or unauthorized"
    }
    ```
  - **Error Response (401 Unauthorized / 403 Forbidden):** (As described in "Add a Review")
  - **Authentication:** ðŸ”’ **Auth Required**.
